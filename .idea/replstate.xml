<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1454778457245">{:repl-history {:ide [], :local [&quot;(first r)&quot; &quot;(last window)&quot; &quot;(last windows)&quot; &quot;(def windows (list tuple1))&quot; &quot;windows&quot; &quot;(filter (fn [window]\n          (let [map (last window)]\n            (within-interval? (:from map) (:to map) now))) windows)&quot; &quot;(add-timed-item-to-windows item windows)&quot; &quot;(let [[name ]])&quot; &quot;tuple1&quot; &quot;tuple2&quot; &quot;(def tuple1 (gen-window now 5))&quot; &quot;(def tuple2 (gen-window (:to (last tuple1)) 5))&quot; &quot;(def tuple2 (gen-window (:to tuple1) 5))&quot; &quot;(def in-chan (chan))\n\n(def standard-channel (time-stamper add-timestamp-with-delay in-chan))\n\n(def windows-channel (create-time-series-windows 2 2))\n&quot; &quot;(onto-chan )&quot; &quot;(def time)&quot; &quot;(def time-series (time-series-data standard-channel windows-channel))\n&quot; &quot;(def in-chan (chan))\n\n(def standard-channel (time-stamper add-timestamp-with-delay in-chan))\n\n(def windows-channel (create-time-series-windows 3 3))\n&quot; &quot;(+ 2 2)&quot; &quot;(def in-chan (chan))\n\n(def standard-channel (time-stamper add-timestamp-with-delay in-chan))\n\n(def windows-channel (create-time-series-windows 3 3))\n\n(def time-series (time-series-data standard-channel windows-channel))\n&quot; &quot;(simple-printer time-series)&quot; &quot;(onto-chan in-chan green-eggs-n-ham)&quot; &quot;\n(onto-chan in-chan green-eggs-n-ham)\n&quot; &quot;(def in-chan (chan))\n\n(def timestamped-data (time-stamper add-timestamp-no-delay in-chan))\n\n(def windows-channel (create-time-series-windows 2 2))\n\n(def windowed (time-series-data timestamped-data windows-channel))\n\n;  (def aggregated (interval-aggregator windowed))\n\n(simple-printer windowed)\n\n(onto-chan in-chan green-eggs-n-ham)\n&quot; &quot;(if-let [[a b] c] (println \&quot;a\&quot; a \&quot;b\&quot; b))&quot; &quot;(def c [nil \&quot;Hello\&quot;])&quot; &quot;(:id nil)&quot; &quot;(def in-chan (chan))\n\n(def timestamped-data (time-stamper add-timestamp-with-delay in-chan))\n\n(def windows-channel (create-time-series-windows 2 2))\n\n(def windowed (time-series-data timestamped-data windows-channel))\n\n;  (def aggregated (interval-aggregator windowed))\n\n(simple-printer windowed)\n\n(onto-chan in-chan green-eggs-n-ham)\n&quot; &quot;(create-time-series-windows 2 2)&quot; &quot;(simple-printer)&quot; &quot;(def time-series-windows (create-time-series-windows 2 2))&quot; &quot;(simple-printer time-series-windows)&quot; &quot;(termination-protocol 30)&quot; &quot;(def termination-chan (termination-protocol 10))&quot; &quot;(simple-printer termination-chan)&quot; &quot;(termination-protocol termination-chan 10)&quot; &quot;(gen-data green-eggs-n-ham)&quot; &quot;(simple-printer termination-chan data-chan)&quot; &quot;(infinite-printer)&quot; &quot;(def data-chan (chan))&quot; &quot;(infinite-printer data-chan)&quot; &quot;(def termination-chan (chan))&quot; &quot;(termination-protocol termination-chan 30)&quot; &quot;(def termination-chan (termination-protocol 30))&quot; &quot;(finite-printer termination-chan data-chan)&quot; &quot;(def window-chan (create-time-series-windows 3 3))&quot; &quot;(def data-chan (gen-data green-eggs-n-ham))&quot; &quot;(def termination-chan (termination-protocol 120))&quot; &quot;(def time-series-chan (time-series-data data-chan window-chan))&quot; &quot;(finite-printer termination-chan time-series-chan)&quot; &quot;(def window-chan (create-time-series-windows 3 3))\n(def data-chan (gen-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 120))\n(def time-series-chan (time-series-data data-chan window-chan))\n(finite-printer termination-chan time-series-chan)&quot; &quot;(def window-chan (create-time-series-windows 3 3))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 120))\n(def time-series-chan (time-series-data data-chan window-chan))\n(finite-printer termination-chan time-series-chan)&quot; &quot;(def window-chan (create-time-series-windows 6 3))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 20))\n(def time-series-chan (time-series-data data-chan window-chan))\n(finite-printer termination-chan time-series-chan)&quot; &quot;(def window-chan (create-time-series-windows 3 3))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 20))\n(def time-series-chan (time-series-data data-chan window-chan (chan 1 (filter #(fn [w] (:closed w))))))\n(finite-printer termination-chan time-series-chan)&quot; &quot;(def window-chan (create-time-series-windows 3 3))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 20))\n(def time-series-chan (time-series-data data-chan window-chan (chan 1 (filter (fn [w] (:closed w))))))\n(finite-printer termination-chan time-series-chan)&quot; &quot;(+ 1 2)&quot; &quot;(def window-chan (create-time-series-windows 3 3))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 20))\n(def time-series-chan (time-series-data data-chan window-chan))\n(finite-printer termination-chan time-series-chan)&quot; &quot;(&gt; 1 0)&quot; &quot;(&gt; 0 1)&quot; &quot;(def window-chan (create-time-series-windows 3 3))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 10))\n(def time-series-chan (time-series-data data-chan window-chan))\n(finite-printer termination-chan time-series-chan)&quot; &quot;(def h [\&quot;Hello\&quot; \&quot;Kitty\&quot;])&quot; &quot;(apply count h)&quot; &quot;(map (count %) h)&quot; &quot;(map #(count %) h)&quot; &quot;(sum (map #(count %) h))&quot; &quot;( (map #(count %) h))&quot; &quot;(def window-chan (create-time-series-windows 3 3))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 10))\n(def time-series-chan (time-series-data data-chan window-chan))\n(def aggregated (interval-aggregator time-series-chan))\n(finite-printer termination-chan aggregated)&quot; &quot;(remove clojure.string/blank? \&quot;a b c\&quot;)&quot; &quot;(apply str [\&quot;Hello\&quot; \&quot;Kitty\&quot;])&quot; &quot;()&quot; &quot;(set (apply str [\&quot;Hello\&quot; \&quot;Kitty\&quot;]))&quot; &quot;(set (apply str [\&quot;Hello there\&quot; \&quot;Kitty dear\&quot;]))&quot; &quot;(count )&quot; &quot;(apply count [\&quot;Hello\&quot; \&quot;Kitty\&quot;])&quot; &quot;(count (set (apply str [\&quot;Hello there\&quot; \&quot;Kitty dear\&quot;])))&quot; &quot;;(def window-chan (create-time-series-windows 3 3))\n;(def data-chan (gen-timed-data green-eggs-n-ham))\n;(def termination-chan (termination-protocol 10))\n;(def time-series-chan (time-series-data data-chan window-chan))\n;(def aggregated (distinct-letter-aggregations time-series-chan))\n;(finite-printer termination-chan aggregated)\n&quot; &quot;(def window-chan (create-time-series-windows 3 3))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 10))\n(def time-series-chan (time-series-data data-chan window-chan))\n(def aggregated (distinct-letter-aggregations time-series-chan))\n(finite-printer termination-chan aggregated)\n&quot; &quot;(def window-chan (create-time-series-windows 10 5))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 30))\n(def time-series-chan (time-series-data data-chan window-chan))\n(def aggregated (distinct-letter-aggregations time-series-chan))\n(finite-printer termination-chan aggregated)\n&quot; &quot;(def window-chan (create-time-series-windows 6 4))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 30))\n(def time-series-chan (time-series-data data-chan window-chan))\n(def aggregated (distinct-letter-aggregations time-series-chan))\n(finite-printer termination-chan aggregated)\n&quot; &quot;(def window-chan (create-time-series-windows 5 5))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 30))\n(def time-series-chan (time-series-data data-chan window-chan))\n(def aggregated (distinct-letter-aggregations time-series-chan))\n(finite-printer termination-chan aggregated)\n&quot; &quot;(def window-chan (create-time-series-windows 3 3))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 30))\n(def time-series-chan (time-series-data data-chan window-chan))\n(def aggregated (distinct-letter-aggregations time-series-chan))\n(finite-printer termination-chan aggregated)\n&quot; &quot;(def window-chan (create-time-series-windows 3 3))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 10))\n(def time-series-chan (time-series-data data-chan window-chan))\n(def aggregated (word-count-aggregations time-series-chan))\n(finite-printer termination-chan aggregated)\n&quot; &quot;(flatten (\&quot;List\&quot;))&quot; &quot;(flatten '(\&quot;List\&quot;))&quot; &quot;(flatten '(\&quot;List\&quot; (vec \&quot;Hello\&quot;)))&quot; &quot;(flatten (vec (\&quot;List\&quot; (vec \&quot;Hello\&quot;))))&quot; &quot;(flatten (vec \&quot;List\&quot; (vec \&quot;Hello\&quot;)))&quot; &quot;(vec \&quot;He\&quot; \&quot;She\&quot;)&quot; &quot;(vec [\&quot;He\&quot; \&quot;She\&quot;])&quot; &quot;(flatten\n  (vec [\&quot;He\&quot; \&quot;She\&quot;]))&quot; &quot;(flatten (vec [\&quot;He\&quot; \&quot;She\&quot; [\&quot;It\&quot;]]))&quot; &quot;(def window-chan (create-time-series-windows 4 2))\n(def data-chan (gen-timed-data green-eggs-n-ham))\n(def termination-chan (termination-protocol 30))\n(def time-series-chan (time-series-data data-chan window-chan))\n(def aggregated (word-count-aggregations time-series-chan))\n(finite-printer termination-chan aggregated)\n&quot; &quot;(&gt;= 10 15)&quot; &quot;(&gt;= 15 10)&quot; &quot;(doc &gt;=)&quot; &quot;(&gt;= 10 11)&quot; &quot;(&gt;= 11 10)&quot; &quot;(&gt;= 11 11)&quot; &quot;(doc &lt;=)&quot; &quot;(create-time-series-windows 8 10)&quot; &quot;(create-time-series-windows 18 10)&quot;], :remote []}}</component>
</project>